{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/michael/6-Projets perso/portfolioMB/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/home/michael/6-Projets perso/portfolioMB/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/michael/6-Projets perso/portfolioMB/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/michael/6-Projets perso/portfolioMB/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/michael/6-Projets perso/portfolioMB/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nvar Utils_1 = require(\"./Utils\");\nvar Utils_2 = require(\"../../Utils/Utils\");\nvar NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nvar Constants_1 = require(\"../../Core/Utils/Constants\");\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 6;\n                return this.initRawData();\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container,\n        options = this.options;\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options,\n        polygonDraw = options.draw;\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator = _createForOfIteratorHelper(this.paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n          var dist = (0, NumberUtils_1.getDistances)(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n          if (dist.distance < radius) {\n            (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container,\n        options = this.options;\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Constants_1.Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size,\n        x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n        y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n          pj = this.raw[j],\n          intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container,\n        options = this.options,\n        parser = new DOMParser(),\n        doc = parser.parseFromString(xml, \"image/svg+xml\"),\n        svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio,\n        scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.raw);\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n              case 5:\n                req = _context3.sent;\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n        options = this.options;\n      var position;\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = (0, Utils_2.itemFromArray)(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var path = (0, Utils_2.itemFromArray)(this.paths),\n        distance = Math.floor(Math.random() * path.length) + 1,\n        point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions,\n        polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      var offset = 0,\n        point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n          return tot + path.length;\n        }, 0),\n        distance = totalLength / options.particles.number.value;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n        _step4;\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n              case 7:\n                if (options.data) {\n                  data = options.data;\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n              case 8:\n                this.createPath2D();\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n      return initRawData;\n    }()\n  }]);\n  return PolygonMaskInstance;\n}();\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Utils_1","require","Utils_2","NumberUtils_1","Constants_1","PolygonMask_1","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","drawPoints","position","_a","_b","length","deepExtend","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D"],"sources":["/home/michael/6-Projets perso/portfolioMB/node_modules/tsparticles/cjs/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_2.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_2.itemFromArray)(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}